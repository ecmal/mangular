{
  "version": 3,
  "file": "module.js",
  "sourceRoot": "/Users/Sergey/Work/BB/wcb-project/mangular/src",
  "sources": [
    "module.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import {Class,Method,Property} from \"runtime/reflect/class\";\nimport {Module} from \"runtime/module\";\nimport {Declaration} from \"runtime/reflect/declaration\";\n\ninterface MangularModules {\n    [name:string] : MangularModule\n}\n\nconst modules:MangularModules = {};\n\nexport class MangularModule {\n    static loadCss(url){\n        var link = document.createElement('link');\n        link.href = url;\n        link.rel = \"stylesheet\";\n        document.head.appendChild(link)\n    }\n    static getClassFunction(clazz:Class,modifier?:(instance:any)=>any):Function{\n        /*var fields:Property[] = <Property[]>clazz.members((f:Member)=>(\n            (f instanceof Property) && f.scope==Scope.INSTANCE && f.hasMetadata(\"angular:inject\"))\n        );\n        var instanceParams = fields.map((f:Property)=>{\n            return f.getMetadata(\"angular:inject\") || ( f.type==Object ? f.name:f.type.name);\n        });\n        var instancePropertys = fields.map((f:Property)=>{\n            return f.name;\n        });\n        var constructParams = clazz.params.map((p:Param)=>{\n            return p.getMetadata(\"angular:inject\") || (p.type==Object ? p.name : p.type.name);\n        });\n        var closure:Function = (...args)=>{\n            var instance = Object.create(clazz.constructor.prototype);\n            for(var i=0;i<instancePropertys.length;i++){\n                instance[instancePropertys[i]] = args.shift();\n            }\n            clazz.constructor.apply(instance,args);\n            if(modifier){\n                instance = modifier(instance) || instance;\n            }\n            return instance;\n        };\n        closure['$inject'] = instanceParams.concat(constructParams);\n        return closure;*/\n        return null;\n    }\n    static getMethodFunction(method:Method):Function{\n       /* var target = method.owner.constructor;\n        if(method.scope==Scope.INSTANCE){\n            target = target.prototype;\n        }\n        var fn = Object.getOwnPropertyDescriptor(target,method.name).value;\n        if(method.scope==Scope.STATIC){\n            fn = fn.bind(target);\n        }\n        fn['$inject'] = method.params.map((p:Param,i:number)=>{\n            var injection:string = p.getMetadata(\"angular:inject\");\n            if(!injection){\n                injection =  p.type===Object ? p.name : p.type.name;\n            }\n            return injection;\n        });\n\n        return fn;*/\n        return null;\n    }\n    static getPropertyValue(field:Property){\n        /*var target = field.owner.constructor;\n        if(field.scope==Scope.INSTANCE){\n            throw new Error('Value should be static field');\n        }else{\n            return Object.getOwnPropertyDescriptor(target,field.name).value\n        }*/\n    }\n    static run(main:string,angular:any){\n        for(var m in modules){\n            modules[m].init(angular)\n        }\n        modules[main].run(angular);\n    }\n    static get(def:Declaration):MangularModule{\n        /*var module:Module;\n        if(def instanceof Param){\n            var owner = def.owner;\n            if(owner instanceof Method){\n                module = owner.owner.owner;\n            }else\n            if(owner instanceof Class){\n                module = owner.owner;\n            }\n        }else\n        if(def instanceof Member){\n            module = def.owner.owner;\n        }else\n        if(def instanceof Class){\n            module = def.owner;\n        }\n        var mModule = modules[module.name];\n        if(!mModule){\n            module.setMetadata(\"angular\",mModule=modules[module.name]=new MangularModule(module));\n        }\n        return mModule;*/\n        return null;\n    }\n    private get name():string{\n        return this.module.name;\n    }\n    private module:Module;\n    private configs:Declaration[];\n    private services:Declaration[];\n    private providers:Declaration[];\n    private controllers:Declaration[];\n    private components:Declaration[];\n    private directives:Declaration[];\n    private filters:Declaration[];\n    private runs:Declaration[];\n    private constants:Declaration[];\n    private factories:Declaration[];\n    private values:Declaration[];\n    private dependencies:string[];\n    private initialized:boolean;\n\n    constructor(module:Module){\n        this.module = module;\n        this.configs = [];\n        this.runs = [];\n        this.services = [];\n        this.providers = [];\n        this.controllers = [];\n        this.components = [];\n        this.directives = [];\n        this.filters = [];\n        this.constants = [];\n        this.factories = [];\n        this.values = [];\n        this.initialized = false;\n    }\n\n    addConfig(def:Declaration){\n        this.configs.push(def)\n    }\n    addFactory(def:Declaration){\n        this.factories.push(def)\n    }\n    addRun(def:Declaration){\n        this.runs.push(def)\n    }\n    addProvider(def:Declaration){\n        this.providers.push(def);\n    }\n    addService(def:Declaration){\n        this.services.push(def);\n    }\n    addController(def:Declaration){\n        this.controllers.push(def);\n    }\n    addDirective(def:Declaration){\n        this.directives.push(def);\n    }\n    addComponent(def:Declaration){\n        this.components.push(def);\n    }\n    addFilter(def:Declaration){\n        this.filters.push(def);\n    }\n    addValue(def:Declaration){\n        this.values.push(def);\n    }\n    addConst(def:Declaration){\n        this.constants.push(def);\n    }\n    create(angular:any):any{\n        /*this.dependencies=['ng'];\n        this.module.dependencies.forEach(d=>{\n            switch(d){\n                case 'mangular/angular/animate'     : this.dependencies.push('ngAnimate');break;\n                case 'mangular/angular/aria'        : this.dependencies.push('ngAria');break;\n                case 'mangular/angular/material'    : this.dependencies.push('ngMaterial');break;\n                case 'mangular/angular/route'       : this.dependencies.push('ngRoute');break;\n                case 'mangular/angular/table'       : this.dependencies.push('md.data.table');break;\n                case 'mangular/angular/ui-router'   : this.dependencies.push('ui.router');break;\n                default :\n                    if(modules[d]){\n                        modules[d].init(angular);\n                        this.dependencies.push(d);\n                    }\n                    break;\n            }\n        });\n        this.dependencies = this.dependencies.filter((e,i,a)=>a.indexOf(e)==i);\n        return angular.module(this.name,this.dependencies);*/\n        return null;\n    }\n    init(angular:any){\n        if(!this.initialized){\n            this.initialized = true;\n            //console.info(\"INIT\",this.name);\n            var aModule:any = this.create(angular);\n            for(var constant of this.constants){\n                this.initConst(aModule,constant)\n            }\n            for(var value of this.values){\n                this.initValue(aModule,value)\n            }\n            for(var config of this.configs){\n                this.initConfig(aModule,config)\n            }\n            for(var run of this.runs){\n                this.initRun(aModule,run);\n            }\n            for(var provider of this.providers){\n                this.initProvider(aModule,provider);\n            }\n            for(var factory of this.factories){\n                this.initFactory(aModule,factory);\n            }\n            for(var service of this.services){\n                this.initService(aModule,service);\n            }\n            for(var controller of this.controllers){\n                this.initController(aModule,controller);\n            }\n            for(var directive of this.directives){\n                this.initDirective(aModule,directive);\n\n            }\n            for(var component of this.components){\n                this.initComponent(aModule,component);\n            }\n            for(var filter of this.filters){\n                this.initFilter(aModule,filter);\n            }\n        }\n    }\n\n    private initConfig(module:any,service:Declaration){\n        var fn = MangularModule.getMethodFunction(<Method>service);\n        module.config(fn);\n    }\n    private initRun(module:any,service:Declaration){\n        var fn = MangularModule.getMethodFunction(<Method>service);\n        module.run(fn);\n    }\n    private initConst(module:any,service:Declaration){\n        /*var field:Property = <Property>service;\n        var name = field.getMetadata(\"angular:const\") || field.name;\n        var value = MangularModule.getPropertyValue(field);\n        module.constant(name,value);*/\n    }\n    private initValue(module:any,service:Declaration){\n        /*var field:Property = <Property>service;\n        var name = field.getMetadata(\"angular:value\") || field.name;\n        var value = MangularModule.getPropertyValue(field);\n        module.value(name,value);*/\n    }\n    private initProvider(module:any,service:Declaration){\n        /*if(service instanceof Class){\n            var clazz = <Class>service;\n            var metadata = clazz.getMetadata(\"angular:provider\");\n            var name = metadata||clazz.name;\n            var provide = clazz.instance['provide'];\n            module.provider(name,MangularModule.getClassFunction(clazz,(instance)=>{\n                instance.$get = provide?MangularModule.getMethodFunction(<Method>provide):instance.provide||instance.$get;\n            }));\n        }*/\n    }\n    private initFactory(module:any,service:Declaration){\n        /*if(service instanceof Method){\n            var method = <Method>service;\n            var name = method.getMetadata(\"angular:factory\")||method.name;\n            module.factory(name,MangularModule.getMethodFunction(method));\n        }*/\n    }\n    private initService(module:any,service:Declaration){\n        /*if(service instanceof Class){\n            var clazz = <Class>service;\n            var metadata = clazz.getMetadata(\"angular:service\");\n            var name = metadata||clazz.name;\n            module.service(name,MangularModule.getClassFunction(clazz));\n        }*/\n    }\n    private initController(module:any,service:Declaration){\n        /*if(service instanceof Class){\n            var clazz = <Class>service;\n            var metadata = clazz.getMetadata(\"angular:controller\");\n            var name = metadata||clazz.name;\n            module.controller(name,MangularModule.getClassFunction(clazz));\n        }*/\n    }\n    private initDirective(module:any,service:Declaration){\n        /*if(service instanceof Class){\n            var clazz = <Class>service;\n            var name = clazz.getMetadata(\"angular:directive\")||clazz.name;\n            var options:any = clazz.getMetadata(\"angular:directive:options\") || {};\n            options.controller = MangularModule.getClassFunction(clazz);\n            options.controllerAs = options.controllerAs||'$ctrl';\n            var compile = clazz.constructor['compile'];\n            var link = clazz.constructor['link'];\n            options.compile = options.compile||compile;\n            if(!options.compile){\n                options.link = options.link||link;\n                if(!options.link){\n                    var preLink = clazz.constructor['preLink'];\n                    var postLink = clazz.constructor['postLink'];\n                    if(preLink||postLink){\n                        options.link = {};\n                        if(preLink){\n                            options.pre = preLink.bind(clazz.constructor);\n                        }\n                        if(postLink){\n                            options.post = postLink.bind(clazz.constructor);\n                        }\n                    }\n                }else{\n                    options.link = options.link.bind(clazz.constructor)\n                }\n            }else{\n                options.compile = options.compile.bind(clazz.constructor)\n            }\n\n            module.directive(name,()=>{\n                return options;\n            });\n        }else\n        if(service instanceof Method){\n            module.directive(service.name,MangularModule.getMethodFunction(<Method>service));\n        }*/\n    }\n    private initComponent(module:any,service:Declaration){\n        /*if(service instanceof Class) {\n            var clazz = <Class>service;\n            var name = clazz.getMetadata(\"angular:component\") || clazz.name;\n            var options:any = clazz.getMetadata(\"angular:component:options\") || {};\n            options.controller = MangularModule.getClassFunction(clazz);\n            module.component(name, options);\n        }*/\n    }\n    private initFilter(module:any,service:Declaration){\n        /*if(service instanceof Class) {\n            var clazz = <Class>service;\n            var name = clazz.getMetadata(\"angular:filter\") || clazz.name;\n            var options:any = clazz.getMetadata(\"angular:filter:options\") || {};\n            var closure:Function = MangularModule.getClassFunction(clazz,(instance)=>{\n                instance = instance.filter.bind(instance);\n                instance.$stateful = options.stateful;\n                instance.$digest = options.digest;\n                return instance;\n            });\n            module.filter(name, closure);\n        }*/\n    }\n\n    run(angular:any){\n        /*angular.element(document).ready(()=> {\n            console.info(\"Mangular.start\",this.module.name);\n            var mMaterials = System.modules['mangular/angular/material'];\n            var mTable = System.modules['mangular/angular/table'];\n\n            if(mMaterials){\n                MangularModule.loadCss(Path.dirname(mMaterials.url)+'/material.css');\n            }\n            if(mTable){\n                MangularModule.loadCss(Path.dirname(mTable.url)+'/table.css');\n            }\n            angular.bootstrap(document, [this.module.name]);\n        })*/\n    }\n\n\n}"
  ]
}